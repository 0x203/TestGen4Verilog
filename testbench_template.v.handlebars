`timescale 1ps/1ps

module main;

    //TODO X:1 okay?

    // create regs for all outgoing signals
    reg reset;
    {{#each outgoing.signals}}
    reg {{name}};
    {{/each}}

    // create wires for all ingoing signals
    {{#each ingoing.signals}}
    wire {{name}};
    {{/each}}

    //create regs for all outgoing data-wires
    {{#each outgoing.data}}
    reg [{{width}}:1] {{name}};
    {{/each}}

    //create wires for all ingoing data-wires
    {{#each ingoing.data}}
    wire [{{width}}:1] {{name}};
    {{/each}}

    //instanciate uut
    // TODO!!!
    Balsa_gcd I0 (r1, a1, r2, a2, d2, r3, a3, d3, r4, a4, d4, reset);

    // set constants for all used data values
    {{#each events}}
    {{#if data}}
    req [{{dataWidthMinus1}}:0] testval{{@index}}_data{{channel}} = {{dataWidth}}'d{{data}};
    {{/if}}
    {{/each}}

    time start;

    // set the adjacency matrix
    reg [{{eventcountMinusOne}}:0]matrix[0:{{eventcountMinusOne}}] = '{
      {{#each matrix}}
        {{eventcount}}'b{{#each .}}{{.}}{{/each}}{{#if @last}} }; {{else}},
{{/if}}
      {{/each}}

    // set occured to the numer of events
    reg [0:{{eventcountMinusOne}}]occured = {{eventcount}}'b{{#each matrix}}1{{/each}};

    enum { idle, active, resetphase } handshake;

    initial begin
        $display("TB_START: %d,%d,%d", testval_d2, testval_d3, testval_d4);

        handshake = resetphase;
        #10000
        // set all outgoing signals to 0 and data to X
        {{#each outgoing.signals}}
        {{name}} = 0;
        {{/each}}
        {{#each outgoing.data}}
        {{name}} = {{width}}'bX;
        {{/each}}
        reset = 0;
        #50000 reset = 1;
        #50000 reset = 0;
        #50000;

        // check all ingoing signals to be 0
        if(
            {{#each ingoing.signals}}{{name}} !== 0{{#unless @last}} || {{/unless}}{{/each}}
        ) begin
            $display("TB_ERROR: reset; a1=%d, r2=%d, r3=%d, r4=%d", a1, r2, r3, r4);
            handshake = idle;
            $finish;
        end

        start = $time;
        handshake = active;
        doOutputs();

        wait(handshake == idle);
        $finish;
    end

    task doOutputs;
        bit didSomething;
    begin
        didSomething = 1;
        // for every outgoing signal render a block of this
        if (1 == 0) begin
            $display("I'll never happen. I'm just a dummy.");
        {{#each events}}
        {{#if activeSense}}
        end else if(
            ((matrix[{{@index}}] & occured) == 0) && occured[{{@index}}] == 1
        ) begin
            $display("TB_DEBUG (%d): out {{type}}{{channel}}+", $time);
            occured[{{@index}}] = 0;
            {{#if data}}
            // set data channel on predefined value
            data{{channel}} = testval{{@index}}_data{{channel}};
            {{/if}}
            {{#if channel}}
            // set handshake signal
            {{type}}{{channel}} = 1;
            {{/if}}
        {{/if}}
        {{/each}}
        end else begin
            didSomething = 0;
        end

        if(didSomething == 1) begin
            doOutputs();
        end
    end
    endtask

    // TODO: don't use events here, but passive ports.
    // there could be multiple events on the same port, this would got wrong with this style here
    {{#each events}}
    {{#unless activeSense}}
    always @ (posedge {{type}}{{channel}}) begin
        if(handshake == active) begin
            $display("TB_DEBUG (%d): in {{type}}{{channel}}+{{#if
                data}}, data{{channel}}=%d{{/if}}", $time{{#if
                data}}, data{{channel}}{{/if}});
            if(((matrix[{{@index}}] & occured) == 0) && occured[{{@index}}] == 1) begin
                {{#if data}}
                if(data{{channel}} == testval{{@index}}_data{{channel}}) begin
                {{/if}}
                occured[{{@index}}] = 0;
                doOutputs();
                {{#if data}}
                end else begin
                    $display("TB_ERROR: data{{channel}} eval; %d != %d", testval{{@index}}_data{{channel}}, data{{channel}});
                    handshake = idle;
                end
                {{/if}}
            end else begin
                $display("TB_ERROR: {{type}}{{channel}}+");
                handshake = idle;
            end
        end
    end

    always @ (negedge {{type}}{{channel}}) begin
        if(handshake == active) begin
            $display("TB_DEBUG (%d): in {{type}}{{channel}}-", $time);
            // TODO use helper to create correct counter-type here
            if(a4 == 1) begin
                $display("TB_DEBUG (%d): out a4-", $time);
                a4 = 0;
            end else begin
                $display("TB_ERROR: {{type}}{{channel}}-");
                handshake = idle;
            end
        end
    end

    {{/unless}}
    {{/each}}

    // TODO: at the very last event: check if it's the last and check for remaining handshakes
    // Problem: what if there are multiple possible last events (which can come in parallel) or such things?!

    //  if(occured !== 0) begin
    //      $display("TB_ERROR: occured");
    //      handshake = idle;
    //  end
endmodule
