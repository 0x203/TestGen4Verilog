`timescale 1ps/1ps

module main;
    //TODO Norman: ist [8:1] f√ºr Daten okay?

    // create regs for all outgoing signals including data
    reg reset;
{{#each outgoing}}
    reg {{type}}{{channel}};
    {{#if dataWidth}}
        reg [{{dataWidth}}:1] data{{channel}};
    {{/if}}
{{/each}}

    // set constants for outgoing data values
{{#each activeEvents}}
    {{#if data}}
        reg [{{dataWidth}}:1] testval{{id}}_data{{channel}} = {{dataWidth}}'d{{data}};
    {{/if}}
{{/each}}

    // create wires and testvals for all ingoing signals and data
{{#each ingoing}}
    wire {{type}}{{channel}};
    {{#if dataWidth}}
        wire [{{dataWidth}}:1] data{{channel}};
        {{#each events}}
            reg [{{../dataWidth}}:1] testval{{eventIndex}}_data{{../channel}} = {{../dataWidth}}'d{{data}};
        {{/each}}
    {{/if}}
{{/each}}

    //instanciate uut with a reqX, an ackX and possibly a dataX for each channel
    {{uutName}} I0 (
        {{#each uutParameters}}req{{channel}}, ack{{channel}}, {{#if data}}data{{channel}}, {{/if}}{{/each}}reset
    );

    time start;

    // set the adjacency matrix
    reg [{{eventcountMinusOne}}:0]matrix[0:{{eventcountMinusOne}}] = '{
      {{#each matrix}}
        {{eventcount}}'b{{#each .}}{{.}}{{/each}}{{#if @last}} }; {{else}},
{{/if}}
      {{/each}}

    // set occured to the numer of events
    reg [0:{{eventcountMinusOne}}]occured = {{eventcount}}'b{{#each matrix}}1{{/each}};

    enum { idle, active, resetphase } handshake;

    initial begin
        $display("TB_START: Outgoing:{{#each
        activeEvents}}{{#if data
            }}data{{channel}}_{{id}} = {{data}}{{#unless @last}}, {{/unless}}{{/if
        }}{{/each}}; Ingoing: {{#each ingoing}}{{#if dataWidth}}{{#each events
            }}data{{../channel}}_{{eventIndex}} = {{data}}, {{/each
        }}{{/if}}{{/each}}");


        handshake = resetphase;
        #10000
        // set all outgoing signals to 0 and data to X
        {{#each outgoing}}
        {{type}}{{channel}} = 0;
        {{#if dataWidth}}
        data{{channel}} = {{dataWidth}}'bX;
        {{/if}}
        {{/each}}
        reset = 0;
        #50000 reset = 1;
        #50000 reset = 0;
        #50000;

        // check all ingoing signals to be 0
        if(
            {{#each ingoing}}{{type}}{{channel}} !== 0{{#unless @last}} || {{/unless}}{{/each}}
        ) begin
            $display("TB_ERROR: reset; {{#each ingoing}}{{type}}{{channel}}=%d{{#unless @last}}, {{/unless}}{{/each}}", {{#each ingoing}}{{type}}{{channel}}{{#unless @last}}, {{/unless}}{{/each}});
            handshake = idle;
            $finish;
        end

        start = $time;
        handshake = active;
        doOutputs();

        wait(handshake == idle);
        $finish;
    end

    task doOutputs;
        bit didSomething;
    begin
        didSomething = 1;
        // for every outgoing signal render a block of this
        {{#each activeEvents}}
        {{#unless @first}}end else {{/unless
        }}if(((matrix[{{id}}] & occured) == 0) && occured[{{id}}] == 1)
        begin
            $display("TB_DEBUG (%d): out {{type}}{{channel}}+", $time);
            occured[{{id}}] = 0;
            {{#if data}}
            // set data channel on predefined value
            data{{channel}} = testval{{id}}_data{{channel}};
            {{/if}}
            {{#if channel}}
            // set handshake signal
            {{type}}{{channel}} = 1;
            {{/if}}
        {{/each}}
        end else begin
            didSomething = 0;
        end

        if(didSomething == 1) begin
            doOutputs();
        end
    end
    endtask

    {{#each ingoing}}
    always @ (posedge {{type}}{{channel}}) begin
        if(handshake == active) begin
            $display("TB_DEBUG (%d): in {{type}}{{channel}}+{{#if
                dataWidth}}, data{{channel}}=%d{{/if}}", $time{{#if
                dataWidth}}, data{{channel}}{{/if}});
            // one if block for each event on this port
            if(1 == 0) begin
                $display("If you see me... that would be weird.");
            {{#each events}}
            end else if(((matrix[{{eventIndex}}] & occured) == 0) && occured[{{eventIndex}}] == 1) begin
                {{#if data}}
                if(data{{../channel}} == testval{{eventIndex}}_data{{../channel}}) begin
                {{/if}}
                occured[{{eventIndex}}] = 0;
                doOutputs();
                {{#if data}}
                end else begin
                    $display("TB_ERROR: data{{../channel}} eval; %d != %d", testval{{this}}_data{{../channel}}, data{{../channel}});
                    handshake = idle;
                end
                {{/if}}
            {{/each}}
            end else begin
                $display("TB_ERROR: {{type}}{{channel}}+");
                handshake = idle;
            end
        end
    end

    always @ (negedge {{type}}{{channel}}) begin
        if(handshake == active) begin
            $display("TB_DEBUG (%d): in {{type}}{{channel}}-", $time);
            if({{counterType type}}{{channel}} == 1) begin
                $display("TB_DEBUG (%d): out {{counterType type}}{{channel}}-", $time);
                {{counterType type}}{{channel}} = 0;
            end else begin
                $display("TB_ERROR: {{type}}{{channel}}-");
                handshake = idle;
            end
        end
    end

    {{/each}}

    // TODO: at the very last event: check if it's the last and check for remaining handshakes
    // Problem: what if there are multiple possible last events (which can come in parallel) or such things?!

    //  if(occured !== 0) begin
    //      $display("TB_ERROR: occured");
    //      handshake = idle;
    //  end
endmodule
